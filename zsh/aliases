# Or source from bash aliases, which use the same syntax

# move to the directory of the front finder window
cdf() {
  target=`osascript -e 'tell application "Finder" to get POSIX path of (target of front Finder window as text)'`
  cd "$target"
}

# open current directory in finder
alias f='open -a Finder ./'

# use dash as man pages
function dash()
{
    open dash://manpages:"$@"
}

# change to use the dash app for viewing docs 
alias man=dash

# Quick way to rebuild the Launch Services database and get rid
# of duplicates in the Open With submenu.
alias fixopenwith='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user'

alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"		# print the directory structure underneath '.'

# Quickly get image dimensions from the command line
function imgsize() {
	local width height
	if [[ -f $1 ]]; then
		height=$(sips -g pixelHeight "$1"|tail -n 1|awk '{print $2}')
		width=$(sips -g pixelWidth "$1"|tail -n 1|awk '{print $2}')
		echo "${width} x ${height}"
	else
		echo "File not found"
	fi
}


# blog stuff (octopress)
bp() { noglob rake integrate ; rake gen_deploy ; }					# generate and deploy the site (blog push)
bnp() { noglob rake new_post["$*"] ; noglob rake isolate[`date '+%Y-%m-%d'`] ; }	# generate a new post and isolate
bnpage() { noglob rake new_page["$*"] ; }						# generate a new page
bisolate() { noglob rake isolate["$*"] ; }						# isolate a few posts to speed up generate
bintegrate() { noglob rake integrate ; }						# integrate all the posts

# No longer used -- use install-key <server>
# install your public key on a server
# cat ~/.ssh/id_rsa.pub | ssh bullpengit@imintel.org "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"

# base64 encode a font so that I can include in my CSS for [marked to work.](http://brettterpstra.com/2013/01/04/previewing-jekyll-posts-with-marked/)
function 64font() {
	openssl base64 -in $1 | awk -v ext="${1#*.}" '{ str1=str1 $0 }END{ print "src:url(\"data:font/"ext";base64,"str1"\")  format(\"woff\");" }'|pbcopy
	echo "$1 encoded as font and copied to clipboard"
}

# suspend current account - effectively go to sleep and present login window
alias suspend='/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

alias ql='qlmanage -p "$@" &gt;&amp; /dev/null'       # quick view file

# Open google chrome from command line
alias chrome="open -a \"Google Chrome\""

# copy output of last command to clipboard
alias cl="fc -e -|pbcopy"

# copy the working directory path
alias cpwd='pwd|tr -d "\n"|pbcopy'

# flush DNS
alias flush="sudo killall -HUP mDNSResponder"

# Get your current public IP
alias ip="curl icanhazip.com"

# Get your current public IP to clipboard
alias cip="curl icanhazip.com|pbcopy"

# mute the system volume
alias stfu="osascript -e 'set volume output muted true'"

# list TODO/FIX from the current project
alias todos="ack -n --nogroup '(TODO|FIX(ME)>):'"

# git stuff
alias ga='git add -A'
alias gap='ga -p'
alias gau='git add -u'
alias gbr='git branch -v'
gc() {
  git diff --cached | grep '\btap[ph]\b' >/dev/null &&
    echo "\e[0;31;29mOops, there's a #tapp or similar in that diff.\e[0m" ||
    git commit -v "$@"
}
alias gc!='git commit -v'
alias gca='git commit -v -a'
alias gcam='gca --amend'
alias gch='git cherry-pick'
alias gcm='git commit -v --amend'
alias gco='git checkout'
alias gcop='gco -p'
alias gd='git diff -M'
alias gd.='git diff -M --color-words="."'
alias gdc='git diff --cached -M'
alias gdc.='git diff --cached -M --color-words="."'
alias gf='git fetch'
git-new() {
  [ -d "$1" ] || mkdir "$1" &&
  cd "$1" &&
  git init &&
  touch .gitignore &&
  git add .gitignore &&
  git commit -m "Added .gitignore."
}
git_current_branch() {
  cat "$(git rev-parse --git-dir 2>/dev/null)/HEAD" | sed -e 's/^.*refs\/heads\///'
}
alias glog='git log --date-order --pretty="format:%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset"'
alias gl='glog --graph'
alias gla='gl --all'
gls() {
  query="$1"
  shift
  glog --pickaxe-regex "-S$query" "$@"
}
alias gm='git merge --no-ff'
alias gmf='git merge --ff-only'
alias gmfthis='gmf origin/$(git_current_branch)'
alias gp='git push'
alias gpthis='gp origin $(git_current_branch)'
alias gr='git reset'
alias grb='git rebase -p'
alias grbthis='grb origin/$(git_current_branch)'
alias grbc='git rebase --continue'
alias grbi='git rebase -i'
alias grh='git reset --hard'
alias grp='gr --patch'
alias grsh='git reset --soft HEAD~'
alias grv='git remote -v'
alias gs='git show'
alias gs.='git show --color-words="."'
alias gst='git stash'
alias gstp='git stash pop'
alias gup='git smart-pull'
gupstation() {
  gup
  gf production
  gf staging
}


# log git reposotiry into day one
# Add current folder to ~/.gitlogger with name specified as argument 1
# For use with gitlogger.sh
function glogd1 () {
  echo "$1:`pwd`" >> ~/.gitlogger
}

alias d1='/Applications/Day\ One.app/Contents/MacOS/dayone'
